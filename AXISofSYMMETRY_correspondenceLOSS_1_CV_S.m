

function    output                                                                                                                                                                                                                          =...
            AXISofSYMMETRY_correspondenceLOSS_1_CV_S                                                                                                                                                                                                                   (...
            input                                                                                                                                                                                                                               )
%%  Description                                                                                                                                                                                            



%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%   
%   Inputs                                                                                                                                                                                     %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%

%       A column vector


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%   Outputs                                                                                                                                                                                    %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%

%       An integer (the index of the estimated axis of symmetry)


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%
%   Description                                                                                                                                                                                %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%

%       Correspondence loss is used to estimate the axis of symmetry on the input interferogram:

%           - Choices are limited, from both sides until after intensity has risen 3/4 of the way to its
%             maximum value (to counter pathologies).

%           - For each location considered, the distances between the intensities of points located 
%             symmetrically about it are averaged.
%
%           - The axis location is estimated as minimizing this loss.  If the choice is not unique, then
%             the greatest intensity is favored.

%%  Common Scripts                                                                                                                                                                                         


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%    Calculations                                                                                                                                                                              %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Average Value (of matrix):              mean(mean(M))

%   Average Value (of matrix's columns):    mean(M)

%   Average Value (of matrix's rows):       mean(M')'

%   Average Value                           mean(M,n)
%   (of matrix along dimension n):



%   Max Value (of matrix):                  max(max(M))

%   Max Value (of matrix's columns):        max(M)

%   Max Value (of matrix's rows):           max(M')'



%   Min Value (of matrix):                  min(min(M))

%   Min Value (of matrix's columns):        min(M)

%   Min Value (of matrix's rows):           min(M')'


%   Norm (of vector):                       norm(v)


%   Pointwise calculations:                 v.*v', v.^2, ...


%   Variance (of matrix's columns):         var(M)



%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%    Colors                                                                                                                                                                                    %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Color to vector converter:              uisetcolor


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%    Conversions                                                                                                                                                                               %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Cell to Matrix:                         cell2mat(C)


%   Number to String:                       num2str(5) 


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%
%   Evaluating                                                                                                                                                                                 %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Program as Argument                     feval(<program>,<program inputs>)


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%
%   Exporting                                                                                                                                                                                  %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Matrix to .CSV:                         dlmwrite(filename,input,'precision',15);


%   Table to .TXT (comma separated)         writetable(input_table,'output location');


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%
%   Importing                                                                                                                                                                                  %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   To Cell:                                readcell(<file location>,'Range','A4:C10');
%   To Matrix:                              readmatrix(<file location>,'Range',[<starting row> <starting column>]);
%   To Table:                               readcell(<file location>,'Range','B4');


%   Directory to Structure:                 dir(['directory location\' '*.txt']);


%   Excel File to Cell Array:               [~,~,output]=xlsread(input);


%   .TXT to Table:                          readtable(input)  


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%
%   Searching                                                                                                                                                                                  %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Condition as an index:                  x(x<=0)=inf     


%   Indices and values satisfying           [row,column,value_when_evaluated]=find(losses==min(losses))
%   a condition


%   Is an element a member:                 ismember(<element>,<set>)


%   Unique Elements of Matrix:              [unique_elements, lowest_index_of_occurence,unique_indices]=unique(M)


%   Unique Elements, Number of Occurences:  accumarray(unique_indices,1)    


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%
%   Strings                                                                                                                                                                                    %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Does it Contain:                        contains(<string>,<substring>)


%   Divide in Two:                          [before,remainder] = strtok(<string>,<delimater>)


%   Divide into Portions:                   split(<string>,<delimiter>)   


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%   System commands                                                                                                                                                                            %  
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%


%   Copyfile:                               copyfile('original location','new location','f')


%   Make directory:                         mkdir([output '\<folder name>']);


%   Movefile:                               movefile('original location','new location','f')


%   Shut down:                              system('shutdown -s')





%%  Avoid pathologies                                                                                                                                                                                      


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%    Bound choices, from both sides, until after intensity has risen this fraction of the way to its                                                                                           %
%    maximum value (to counter pathologies).                                                                                                                                                   %
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%

intensity_bound=0.75;


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%    Bound choices, from both sides, until after intensity has risen 3/4 of the way to its maximum value                                                                                       %
%    (to counter pathologies).                                                                                                                                                                 %
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%

bound  =  intensity_bound*(max(input)-min(input))+min(input);

lower_bound  =  find(input>bound,1);

upper_bound  =  length(input)-find(flipud(input)>bound,1)+1;



%%  Select an axis of symmetry                                                                                                                                                                             


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%    For each location considered, find the average distance between the intensities of points located                                                                                         %
%    symmetrically about it.                                                                                                                                                                   %
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%

axes_losses=[];

for i=lower_bound:upper_bound
    
    interval=min(i-1,length(input)-i);
    
    axes_losses(i,1)=sum(abs(input(i-interval:i+interval,1)-flipud(input(i-interval:i+interval,1))))/interval;
    
end


%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------% 
%    Find where this loss is minimized.  If not unique, choose based on the greatest intensity.                                                                                                %
%----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%

axes_losses(axes_losses<=0)=inf;

[indices,~]=find(axes_losses==min(axes_losses));


if length(indices)==1
    
    output=indices;
    
else
    
    for i=1:length(indices(:,1))
        
        indices(i,2)=input(i,1);
    
    end
        
    [index,~]=find(indices(:,2)==max(indices(:,2)));
    
    output=indices(index,1);

end
    


end
